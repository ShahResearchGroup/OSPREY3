TODO soon:
1. Output minimized structure
2. K*
3. COMETS
4. Higher tuples in TupleMatrix & A*/pruning bounds
5. Res merging/RC partitioning
6. EPIC
7. Dynamic A* & MPLP
8. Old minDEE
9. Limiting number of AAs mutated in A* (i.e. ConfTree node pruning)
10. Partial splitting in A*
11. Gradients in energy; minimizer besides CCD
12. DACS
13. Pruning methods not currently included (indirect, conf-splitting)
14. DEEPer
15. Better serialization method for energy matrix?


ADVANTAGES OF REFACTOR
1. Organized as packages
2. Much more modular, e.g. search is over abstract assignments, and operations like DOF application and energy calls done through interfaces
3. More concise
4. Much less duplication of function, e.g. different coordinates, different residue numbering schemes, different minimizers and DEE classes
5. Can easily accommodate better and very different minimizers, energy functions, search algorithms, degrees of freedom, etc. (similar to #2)
6. (Hopefully) easier user interface (don't need concept of strand, etc.)
7. Classes more intuitive/easier to understand what each module does (this could be subjective)
8. Easier to handle rotamers that change protonation state, etc. (hopefully)
9. Can mutate non-protein residues similar to how proteins are done, so can design small molecules, any combination of D- and L- amino acids, etc. easily (to the extent the energy function allows)
10. Reading in structures/assigning template more straightforward (no brittle definitions for bonds, etc.), and atoms named according to template, so don't have errors due to atoms having unexpected names